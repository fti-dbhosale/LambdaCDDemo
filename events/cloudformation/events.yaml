AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Setting thermal-events
Globals:
  Function:
    Runtime: !Ref PythonRuntime
    MemorySize: 256
    Timeout: 15
    CodeUri:
      Bucket: !Ref LambdaCodeS3Bucket
      Key: !Ref LambdaCodeS3Key

Resources:
  EventTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Join
        - ''
        - - Events-
          - !Ref RealmName
      AttributeDefinitions:
        - AttributeName: EventID
          AttributeType: S
        - AttributeName: EventDate
          AttributeType: S
        - AttributeName: userID-eventCategory-zoneID
          AttributeType: S
        - AttributeName: userID-eventCategory-personID
          AttributeType: S
        - AttributeName: userID-eventCategory-eventType
          AttributeType: S
        - AttributeName: userID-eventCategory-zoneID-eventType
          AttributeType: S
      KeySchema:
        - AttributeName: EventID
          KeyType: HASH
        - AttributeName: EventDate
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: userID-eventCategory-zoneID-EventDate-index
          KeySchema:
            - AttributeName: userID-eventCategory-zoneID
              KeyType: HASH
            - AttributeName: EventDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: userID-eventCategory-personID-EventDate-index
          KeySchema:
            - AttributeName: userID-eventCategory-personID
              KeyType: HASH
            - AttributeName: EventDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: userID-eventCategory-eventType-EventDate-index
          KeySchema:
            - AttributeName: userID-eventCategory-eventType
              KeyType: HASH
            - AttributeName: EventDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: userID-eventCategory-zoneID-eventType-EventDate-index
          KeySchema:
            - AttributeName: userID-eventCategory-zoneID-eventType
              KeyType: HASH
            - AttributeName: EventDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
  EventTableWriteCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 10000
      MinCapacity: 5
      ResourceId:
        "Fn::Join":
          - "/"
          - - table
            - Ref: EventTable
      RoleARN: !GetAtt AutoScalingDynamoDBRole.Arn
      ScalableDimension: "dynamodb:table:WriteCapacityUnits"
      ServiceNamespace: dynamodb
  EventTableWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: EventTableWriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: EventTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  EventTableReadCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 10000
      MinCapacity: 5
      ResourceId:
        "Fn::Join":
          - "/"
          - - table
            - Ref: EventTable
      RoleARN: !GetAtt AutoScalingDynamoDBRole.Arn
      ScalableDimension: "dynamodb:table:ReadCapacityUnits"
      ServiceNamespace: dynamodb
  EventTableReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: EventTableReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: EventTableReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

  AutoScalingDynamoDBRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ScalingDynamoDB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:UpdateTable'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:SetAlarmState'
                  - 'cloudwatch:DeleteAlarms'
                Resource: '*'

  EventsConfigTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Join
        - ''
        - - EventsConfig-
          - !Ref RealmName
      AttributeDefinitions:
        - AttributeName: EventType
          AttributeType: S
      KeySchema:
        - AttributeName: EventType
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'

  EventDispatchFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: dispatcher/event_dispatcher.lambda_handler
      FunctionName: !Sub EventDispatch-${RealmName}
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref EventNotifyTopic
            - Effect: Allow
              Action:
                - "dynamodb:GetItem"
                - "dynamodb:Query"
                - "dynamodb:Scan"
                - "dynamodb:DeleteItem"
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
              Resource:
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Events*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ActivityLog-*'
      Events:
        SNS1:
          Type: SNS
          Properties:
            Topic:
              Fn::ImportValue: !Sub MarkerLogTableSNSTopic-${RealmName}-Arn
      Environment:
        Variables:
          ENV_VALID_EVENT_DAYS: 3
          ENV_TARGET_SNS_TOPIC_ARN: !Ref EventNotifyTopic
          ENV_EVENT_TABLE_NAME: !Join
            - ''
            - - Events-
              - !Ref RealmName
          ENV_EVENT_CONFIG_TABLE_NAME: !Join
            - ''
            - - EventsConfig-
              - !Ref RealmName
          ENV_ACTIVITYLOG_TABLE_NAME: !Join
            - ''
            - - ActivityLog-
              - !Ref RealmName
  EventNotifyTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: EventNotifyTopic
  EmailNotifyQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: EmailNotify

  EventNotifyTopicToEmailNotifyQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "allow-sns-messages"
            Effect: Allow
            Principal: "*"
            Resource: !GetAtt
              - EmailNotifyQueue
              - Arn
            Action: "SQS:SendMessage"
            Condition:
              ArnEquals:
                "aws:SourceArn": !Ref EventNotifyTopic
      Queues:
        - Ref: EmailNotifyQueue

  EmailEventFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: dispatcher/email.lambda_handler
      FunctionName: !Sub EventEmail
      Events:
        SQS1:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailNotifyQueue.Arn
            BatchSize: 1

  # Create the subscription to the 'EmailNotifyQueue'
  EmailNotifyQueueSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref EventNotifyTopic
      Endpoint: !GetAtt
        - EmailNotifyQueue
        - Arn
      Protocol: sqs
      RawMessageDelivery: 'true'
      FilterPolicy:
        target:
          - email

  EventsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: events-api
      StageName: !Ref RealmName
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  EventSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: event_search.search
      FunctionName: !Sub EventSearchFunction-${RealmName}
      MemorySize: 2048
      Timeout: 30
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:GetItem"
                - "dynamodb:Query"
                - "dynamodb:Scan"
              Resource:
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Events-*'
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - '*'
      Environment:
        Variables:
          ENV_EVENT_TABLE_NAME: !Join
            - ''
            - - Events-
              - !Ref RealmName
          ENV_CloudFrontKeyPairID: !Ref CloudFrontKeyPairID
          ENV_CloudFrontKeyPairBucket: !Ref CloudFrontKeyPairBucket
          ENV_CloudFrontKeyPairFileKey: !Ref CloudFrontKeyPairFileKey
          ENV_CloudFrontDeviceImagesBucketDomainName: DevicesImagesBucketDistribution-${RealmName}-DomainName
      Events:
        GetEvents:
          Type: Api
          Properties:
            Path: /events
            RestApiId: !Ref EventsApi
            Method: post

  EventGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub EventGetFunction-${RealmName}
      Handler: event_details.get
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:GetItem"
                - "dynamodb:Query"
              Resource:
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Events-*'
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - '*'
      Environment:
        Variables:
          ENV_EVENT_TABLE_NAME: !Join
            - ''
            - - Events-
              - !Ref RealmName
          ENV_CloudFrontKeyPairID: !Ref CloudFrontKeyPairID
          ENV_CloudFrontKeyPairBucket: !Ref CloudFrontKeyPairBucket
          ENV_CloudFrontKeyPairFileKey: !Ref CloudFrontKeyPairFileKey
          ENV_CloudFrontDeviceImagesBucketDomainName: DevicesImagesBucketDistribution-${RealmName}-DomainName
      Events:
        GetEvents:
          Type: Api
          Properties:
            Path: /event
            RestApiId: !Ref EventsApi
            Method: post

  EventPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub EventPutFunction-${RealmName}
      Handler: event_put.put
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:PutItem"
              Resource:
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*'
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - '*'
      Environment:
        Variables:
          ENV_MARKER_LOG_TABLE_NAME: !Sub MarkerLog-${RealmName}
      Events:
        GetEvents:
          Type: Api
          Properties:
            Path: /markerlog
            RestApiId: !Ref EventsApi
            Method: post

Parameters:
  InstanceName:
    Default: dev
    Description: The name of this instance
    Type: String
    MinLength: '2'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9][a-zA-Z0-9]*'
    ConstraintDescription: >-
      must begin with a letter, at least two characters, and contain only alphanumeric characters.
  Version:
    Description: stack version.
    Type: String
  LambdaCodeS3Bucket:
    Description: The S3 Bucket of lambda code
    Type: String
  LambdaCodeS3Key:
    Description: The S3 Key of lambda code
    Type: String
  RealmName:
    Description: target data realm.
    Type: String
  PythonRuntime:
    Description: Python runtime
    Type: String
    Default: python3.8
  CloudFrontKeyPairID:
    Description: CloudFront Key Pair ID
    Type: String
  CloudFrontKeyPairBucket:
    Description: CloudFront Key Pair Bucket
    Type: String
  CloudFrontKeyPairFileKey:
    Description: CloudFront Key Pair File Key
    Type: String
Outputs:
  # Find out more about other implicit resources you can reference within SAM
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources.html
  EventDispatchFunctionArn:
    Description: "Events dispatcher lambda function ARN"
    Value: !Ref EventDispatchFunction
  EventApi:
    Description: "API Gateway endpoint for events-api"
    Value: !Sub "https://${EventsApi}.execute-api.${AWS::Region}.amazonaws.com/"
  EventFunction:
    Description: "Events Lambda function ARN"
    Value: !GetAtt EventSearchFunction.Arn
  EventFunctionIamRole:
    Description: "Implicit IAM Role created for events function"
    Value: !GetAtt EventSearchFunction.Arn
  EventNotifyTopicArm:
    Description: "Implicit IAM Role created for event notify topic"
    Value: !Ref EventNotifyTopic
